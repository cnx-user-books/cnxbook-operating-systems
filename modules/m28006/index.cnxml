<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Review question: Synchronization</title>
  <metadata>
  <md:content-id>m28006</md:content-id><md:title>Review question: Synchronization</md:title>
  <md:abstract>Review question of Synchronization</md:abstract>
  <md:uuid>4d63f84d-1d84-4a0e-93e2-4d3b4eeed707</md:uuid>
</metadata>

<content>
    <section id="id-706415199772">
      <title>Explain the three different types of scheduling: long-term, mid-
term, and short-term. What does the operating system do and when? </title>
      <para id="id4256964">Long-term scheduling is used to admit new processes 
to the system and is done whenever a user wants to create a new process.</para>
      <para id="id4256971">Medium-term scheduling is used to swap processes 
between secondary storage and main memory and is done periodically to ensure the 
CPU utilization is high and that the page fault rate is low.</para>
      <para id="id4256978">Short-term scheduling is used to allocate the CPU to 
a process and is done whenever a process has its timeslice expire, or when the 
current process needs to perform some I/O.</para>
    </section>
    <section id="id-948206891853">
      <title>Explain why Shortest Process Next, Shortest Remaining Time, and 
Highest Response Ratio Next all need to estimate the future CPU bursts of each 
process. Explain how this is done. </title>
      <para id="id4256996">All of these scheduling algorithms try to order the 
queue according to the next CPU burst a process is likely to have. Since it is 
not possible to look into the future or examine the process and know the length 
of the next burst, this quantity must be estimated. This is done by using past 
CPU bursts to predict future burst. The estimate of the next CPU burst is 
calculated as a weighted, exponential average. The previous CPU burst is given 
weight alpha and the current estimate is given weight (1 - alpha). By varying 
alpha, more weight can be given to the most recent CPU burst, allowing for 
faster reaction to changes in a process but also a highly varying estimate. 
Giving weight to the previous estimate allows the estimate to change more 
smoothly. In effect, the estimation equation gives an exponentially smaller 
weight to CPU bursts the farther in the past they occurred.</para>
    </section>
    <section id="id-571589635123">
      <title>Most round-robin schedulers use a fixed size quantum. Give an 
argument in favor of a small quantum. Now give an argument in favor of a large 
quantum. Compare and contrast the types of systems and jobs to which the 
arguments apply. Are there any for which both are reasonable? </title>
      <para id="id4257027">A small quantum reduces the response time for all 
processes, which is important for interactive processes. However, a long quantum 
reduces the overhead of process switching, which increases throughput and CPU 
utilization. A short quantum is useful for a general-purpose computer. A long 
quantum is useful for a batch system. You might have a system that uses a short 
quantum when there are jobs that need a quick response time, then lengthens the 
quantum when heavy computation needs to be done.</para>
    </section>
    <section id="id-822029445404">
      <title>Which type of process is generally favored by a multilevel feedback 
queuing scheduler -- a processor-bound process or an I/O-bound process? Briefly 
explain why. </title>
      <para id="id4257050">A I/O bound process is favored by a multilevel 
feedback queueing scheduler because jobs that use the CPU heavily will be moved 
to low priority queues. This will leave the I/O bound processes in the higher 
priority queues.</para>
    </section>
    <section id="id-774885569569">
      <title>Problems</title>
      <para id="id4257059">
        <!--Empty sections are illegal in CNXML 0.5.  This empty paragraph is a 
place holder that added as a byproduct of the word importer.-->
      </para>
    </section>
    <section id="id-837332418423">
      <title>Consider an environment in which there is a one-to-one mapping 
between user-level threads and kernel-level threads that allows one or more 
threads within a process to issue blocking system calls while other threads 
continue to run. Explain why this model can make multithreaded programs run 
faster than their single-threaded counterparts on a uniprocessor machine. 
</title>
      <para id="id4257079">The issue here is that a program spends much of its 
time waiting for I/O to complete. In a multithreaded program, one KLT can make 
the blocking system call, while the other KLTs can continue to run. On a 
uniprocessor machine, a process that would otherwise have to block for all these 
calls can continue to run its other threads.</para>
    </section>
    <section id="id-0936834284187">
      <title>A multiprocessor with eight processors has 20 attached tape drives. 
There is a large number of jobs submitted to the system, and each requires a 
maximum of four tape drives to complete execution. Assume that each job starts 
running with only three tape drives for a long period before requiring the 
fourth tape drive for a short period toward the end of its operation. Also 
assume an endless supply of such jobs.</title>
      <para id="id4257103">a.      Assume the scheduler in the OS will not start 
a job unless there are four tape drives available. When a job is started, four 
drives are assigned immediately and are not released until the job finishes. 
What is the maximum number of jobs that can be in progress at once? What is the 
maximum and minimum number of tape drives that may be left idle as a result of 
this policy? </para>
      <para id="id4294108">If a conservative policy is used, at most 20/4 = 5 
processes can be active simultaneously. Because one of the drives allocated to 
each process can be idle most of the time, at most 5 drives will be idle at a 
time. In the best case, none of the drives will be idle.</para>
      <para id="id4294116">b.      Suggest an alternative policy to improve tape 
drive utilization and at the same time avoid system deadlock. What is the 
maximum number of jobs that can be in progress at once? What are the bounds on 
the number of idling tape drives? </para>
      <para id="id4294136">To improve drive utilization, each process can be 
initially allocated with three tape drives. The fourth one will be allocated on 
demand. In this policy, at most floor(20/3) = 6 processes can be active 
simultaneously. The minimum number of idle drives is 0 and the maximum number is 
2. </para>
    </section>
    <section id="id-388445772731">
      <title>Consider the following set of processes: </title>
      <table id="id4294153" summary="">
        <tgroup cols="3">
          <colspec colnum="1" colname="c1"/>
          <colspec colnum="2" colname="c2"/>
          <colspec colnum="3" colname="c3"/>
          <tbody>
            <row>
              <entry>Process Name</entry>
              <entry>Arrival Time</entry>
              <entry>Processing Time</entry>
            </row>
            <row>
              <entry>A</entry>
              <entry>0</entry>
              <entry>3</entry>
            </row>
            <row>
              <entry>B</entry>
              <entry>1</entry>
              <entry>5</entry>
            </row>
            <row>
              <entry>C</entry>
              <entry>3</entry>
              <entry>2</entry>
            </row>
            <row>
              <entry>D</entry>
              <entry>9</entry>
              <entry>5</entry>
            </row>
            <row>
              <entry>E</entry>
              <entry>12</entry>
              <entry>5</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para id="id4252047">Perform the same analysis as depicted for this 
set.</para>
      <para id="id4252052">             0         5        10        15        
20</para>
      <para id="id4252058">             | | | | | | | | | | | | | | | | | | | | 
|</para>
      <para id="id4252063"> </para>
      <para id="id4252068">FCFS     P1 ------</para>
      <para id="id4252073">         P2        ----------</para>
      <para id="id4252078">         P3                  ----</para>
      <para id="id4252083">         P4                      ----------</para>
      <para id="id4252089">         P5                                ----------
</para>
      <para id="id4252094"> </para>
      <para id="id4252099">RR q=1   P1 -- --    --     </para>
      <para id="id4252104">         P2    -- --    -- -- --</para>
      <para id="id4252110">         P3          --    --</para>
      <para id="id4129344">         P4                    -- -- -- -- --</para>
      <para id="id4129350">         P5                          -- -- -- ----
</para>
      <para id="id4129355"> </para>
      <para id="id4129360">RR q=4   P1 ------         </para>
      <para id="id4129365">         P2        --------    --   </para>
      <para id="id4129370">         P3                ----</para>
      <para id="id4129376">         P4                      --------        --
</para>
      <para id="id4129381">         P5                              -------- --
</para>
      <para id="id4129387"> </para>
      <para id="id4129392">SPN      P1 ------         </para>
      <para id="id4129397">         P2            ----------</para>
      <para id="id4129402">         P3        ----</para>
      <para id="id4129406">         P4                      ----------</para>
      <para id="id4129412">         P5                                ----------
</para>
      <para id="id4129418"> </para>
      <para id="id4129422">SRT      P1 ------         </para>
      <para id="id4129428">         P2            ----------</para>
      <para id="id4129433">         P3        ----</para>
      <para id="id4129437">         P4                      ----------</para>
      <para id="id4129443">         P5                                ----------
</para>
      <para id="id4129448"> </para>
      <para id="id4129453">HRRN     P1 ------</para>
      <para id="id4129458">         P2        ----------</para>
      <para id="id4129463">         P3                  ----</para>
      <para id="id4129468">         P4                      ----------</para>
      <para id="id4129474">         P5                                ----------
</para>
      <para id="id4129480"> </para>
      <para id="id4129484">FB q=1   P1 -- --      --</para>
      <para id="id4129489">         P2    --    --    ---- --</para>
      <para id="id4129495">         P3        -- --      </para>
      <para id="id4129500">         P4                   -- -- -- -- -- </para>
      <para id="id4129505">         P5                          -- -- -- ----
</para>
      <para id="id4360505"> </para>
      <para id="id4360510">FB q=2^i P1 -- ----</para>
      <para id="id4360515">         P2    --      ---- ----</para>
      <para id="id4360520">         P3          --    --      </para>
      <para id="id4360525">         P4                      ------ ----</para>
      <para id="id4360530">         P5                            --    --------
</para>
      <para id="id4360536">For feedback queueing with a quantum of 1, I assume 
that when a process is taken off the processor and placed in a lower priority 
queue, it is not eligible to go right back onto the processor. It must wait 
another quantum. For feedback queueing with a quantum of 2i, I assume that a 
newly arriving process can't preempt the current process until it is done with 
its quantum. This is different from the book's assumption and therefore 
different from Figure 9.5 in the book.</para>
      <para id="id4360560">Here are the metrics:</para>
      <para id="id4360564">               1     2     3     4     5</para>
      <para id="id4360570">       Ta      0     1     3     9    12</para>
      <para id="id4360575">       Ts      3     5     2     5     5</para>
      <para id="id4360580">================================================</para>
      <para id="id4360585">FCFS   Tf      3     8    10    15    20</para>
      <para id="id4360592">       Tq      3     7     7    6     8    
6.20</para>
      <para id="id4360597">     Tq/Ts   1.00 1.40 3.50 1.20 1.60   1.74</para>
      <para id="id4360602">================================================</para>
      <para id="id4360608">RR q=1 Tf      6    11     8    18    20</para>
      <para id="id4360614">       Tq      6    10     5     9     8    
7.60</para>
      <para id="id4360619">     Tq/Ts   2.00 2.00 2.50 1.80 1.60   1.98</para>
      <para id="id4360625">================================================</para>
      <para id="id4360630">RR q=4 Tf      3    10     9    19    20</para>
      <para id="id4360636">       Tq      3     9     6    10     8    
7.20</para>
      <para id="id4360642">     Tq/Ts   1.00 1.80 3.00 2.00 1.60   1.88</para>
      <para id="id4360647">================================================</para>
      <para id="id4360652">SPN    Tf      3    10     5    15    20</para>
      <para id="id4360658">       Tq      3     9     2     6     8    
5.60</para>
      <para id="id4360664">     Tq/Ts   1.00 1.80 1.00 1.20 1.60   1.32</para>
      <para id="id4360669">================================================</para>
      <para id="id4230606">SRT    Tf      3    10     5    15    20</para>
      <para id="id4230612">       Tq      3     9     2     6     8    
5.60</para>
      <para id="id4230618">     Tq/Ts   1.00 1.80 1.00 1.20 1.60   1.32</para>
      <para id="id4230623">================================================</para>
      <para id="id4230628">HRRN   Tf      3    10     5    15    20</para>
      <para id="id4230634">       Tq      3     7     7     6     8    
6.20</para>
      <para id="id4230640">     Tq/Ts   1.00 1.40 3.50 1.20 1.60   1.74</para>
      <para id="id4230645">================================================</para>
      <para id="id4230650">FB q=1 Tf      7    11     6    18    20</para>
      <para id="id4230656">       Tq      7    10     3     9     8    
7.40</para>
      <para id="id4230662">     Tq/Ts   2.33 2.00 1.50 1.80 1.60   1.85</para>
      <para id="id4230667">================================================</para>
      <para id="id4230672">FB q=1 Tf      4    10     8    16    20</para>
      <para id="id4230679">       Tq      4     9     5     7     8    
7.00</para>
      <para id="id4230684">     Tq/Ts   1.33 1.80 2.50 1.40 1.60   1.81</para>
      <para id="id4230689">================================================</para>
      <para id="id4230694">Assume the following burst-time pattern for a 
process: 6,4,6,4,13,13,13, and assume that the initial guess is 10. </para>
    </section>
    <section id="id-202381799924">
      <title>Five batch jobs, A through E, arrive at a computer center at 
essentially the same time. They have an estimated running time of 15, 9, 3, 6, 
and 12 minutes, respectively. Their (externally defined) priorities are 6, 3, 7, 
9, and 4 respectively, with a lower value corresponding to a higher priority. 
For each of the following scheduling algorithms, determine the turnaround time 
for each process and the average turnaround time for all jobs. Ignore process 
switching overhead. Explain how you arrived at your answers. In the last three 
cases, assume that only one job at a time runs until it finishes and that all 
jobs are completely processor bound. </title>
      <para id="id4230719">Process    Running Time      Priority</para>
      <para id="id4230725">   A           15                4</para>
      <para id="id4230730">   B            9                7</para>
      <para id="id4230735">   C            3                3</para>
      <para id="id4230741">   D            6                1</para>
      <para id="id4230746">   E           12                6</para>
      <para id="id4230751"> </para>
      <para id="id4230756">a. round robin with a time quantum of 1 minute 
</para>
      <para id="id4230761">1 2 3 4 5   Elapsed Time</para>
      <para id="id4230766">============================</para>
      <para id="id4305150">A B C D E   5</para>
      <para id="id4305154">A B C D E   10</para>
      <para id="id4305159">A B C D E   15</para>
      <para id="id4305164">A B     D E   19</para>
      <para id="id4305169">A B     D E   23</para>
      <para id="id4305174">A B     D E   27</para>
      <para id="id4305179">A B        E   30</para>
      <para id="id4305184">A B        E   33</para>
      <para id="id4305189">A B        E   36</para>
      <para id="id4305194">A           E   38</para>
      <para id="id4305200">A           E   40</para>
      <para id="id4305205">A           E   42</para>
      <para id="id4305210">A               43</para>
      <para id="id4305216">A               44</para>
      <para id="id4305221">A               45</para>
      <para id="id4305226"> </para>
      <para id="id4305231"> </para>
      <para id="id4305235">Process Turnaround Time</para>
      <para id="id4305240">========================</para>
      <para id="id4305244">A        45</para>
      <para id="id4305249">B        35</para>
      <para id="id4305254">C        13</para>
      <para id="id4305259">D        26</para>
      <para id="id4305264">E        42</para>
      <para id="id4305269"> </para>
      <para id="id4305273">Average Turnaround Time = 32.2 minutes</para>
      <para id="id4305278">    </para>
      <para id="id4305282">b. priority scheduling </para>
      <para id="id4305286">Process Priority Turnaround Time</para>
      <para id="id4305292">==================================</para>
      <para id="id4305296">B        7         9</para>
      <para id="id4305301">E        6        21</para>
      <para id="id4305307">A        4        36</para>
      <para id="id4305312">C        3        39</para>
      <para id="id4305318">D        1        45</para>
      <para id="id4310818"> </para>
      <para id="id4310823">Average Turnaround Time = 30 minutes</para>
      <para id="id4310827">    </para>
      <para id="id4310831">c. FCFS (run in order 15, 9, 3, 6, and 12) </para>
      <para id="id4310836">Process Turnaround Time</para>
      <para id="id4310841">========================</para>
      <para id="id4310845">A        15</para>
      <para id="id4310850">B        24</para>
      <para id="id4310855">C        27</para>
      <para id="id4310860">D        33</para>
      <para id="id4310864">E        45</para>
      <para id="id4310869"> </para>
      <para id="id4310874">Average Turnaround Time = 28.8 minutes</para>
      <para id="id4310878">    </para>
      <para id="id4310882">d. shortest job first </para>
      <para id="id4310887">Process Running Time Turnaround Time</para>
      <para id="id4310893">======================================</para>
      <para id="id4310897">C            3          3</para>
      <para id="id4310902">D            6          9</para>
      <para id="id4310908">B            9          18</para>
      <para id="id4310914">E           12          30</para>
      <para id="id4310920">A           15          45</para>
      <para id="id4310926"> </para>
      <para id="id4310930">Average Turnaround Time = 21 minutes</para>
      <para id="id4310934">    </para>
    </section>
    <section id="id-567036134289">
      <title>Consider a set of three periodic tasks with the execution profiles 
as follows: </title>
      <table id="id4310947" summary="">
        <tgroup cols="4">
          <colspec colnum="1" colname="c1"/>
          <colspec colnum="2" colname="c2"/>
          <colspec colnum="3" colname="c3"/>
          <colspec colnum="4" colname="c4"/>
          <tbody>
            <row>
              <entry>Process</entry>
              <entry>Arrival Time</entry>
              <entry>Execution Time</entry>
              <entry>Ending Deadline</entry>
            </row>
            <row>
              <entry>A(1)</entry>
              <entry>0</entry>
              <entry>10</entry>
              <entry>20</entry>
            </row>
            <row>
              <entry>A(2)</entry>
              <entry>20</entry>
              <entry>10</entry>
              <entry>40</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>B(1)</entry>
              <entry>0</entry>
              <entry>10</entry>
              <entry>50</entry>
            </row>
            <row>
              <entry>B(2)</entry>
              <entry>50</entry>
              <entry>10</entry>
              <entry>100</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>C(1)</entry>
              <entry>0</entry>
              <entry>15</entry>
              <entry>50</entry>
            </row>
            <row>
              <entry>C(2)</entry>
              <entry>50</entry>
              <entry>15</entry>
              <entry>100</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
            <row>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
              <entry>.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para id="id4253094">Develop scheduling diagrams for this set of 
tasks.</para>
    </section>
    <section id="id-873638522538">
      <title>Suppose that a microcontroller used in an automobile has four 
priority levels for interrupts. The units interrupting the controller include an 
impact sensor subsystem, which needs attention with 0.1 ms, along with four 
other subsystems as follows: </title>
      <table id="id4253111" summary="">
        <tgroup cols="3">
          <colspec colnum="1" colname="c1"/>
          <colspec colnum="2" colname="c2"/>
          <colspec colnum="3" colname="c3"/>
          <tbody>
            <row>
              <entry>Subsystem</entry>
              <entry>Interrupt Rate</entry>
              <entry>Max service time (ms)</entry>
            </row>
            <row>
              <entry>Fuel/ignition</entry>
              <entry>500/sec</entry>
              <entry>1</entry>
            </row>
            <row>
              <entry>Engine temperature</entry>
              <entry>1/sec</entry>
              <entry>100</entry>
            </row>
            <row>
              <entry>Dashboard display</entry>
              <entry>800/sec</entry>
              <entry>0.2</entry>
            </row>
            <row>
              <entry>Air conditioner</entry>
              <entry>1/sec</entry>
              <entry>100</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para id="id4304968">Discuss how priorities could be assigned to guarantee 
the response time of 0.1 ms for the impact sensor and to handle each of the 
other critical units before the next interrupt is produced.</para>
      <para id="id4304975">The impact sensor must be given the highest priority 
because its required response time is less than the service time for each of the 
other interrupts types; no other subsystem can share this highest priority. 
</para>
      <para id="id4304983">The air conditioner can be given the lowest priority 
level because its function is not safety-critical.</para>
      <para id="id4304989">We have two priority levels left for three 
subsystems.</para>
      <para id="id4304994">Because the engine temperature monitor has a maximum 
service time of 100 ms it must have a lower priority than the display and 
fuel/ignition subsystems, which need several hundreds of service periods per 
second.</para>
      <para id="id4305002">Finally, the display and fuel/ignition subsystems can 
share the same priority level since each can be served after the other without 
exceeding the time available before the next interrupt.</para>
      <para id="id4305009">For example, if the fuel/ignition subsystem service 
starts right before the display interrupt, a total of 1.2 ms will elapse before 
the service routines of both interrupts are completed, whereas there is 1/800 
sec - 1.25 ms available before the next dashboard display interrupt 
arrives.</para>
      <para id="id4305018">Note that we have ignored the service time for impact 
sensor subsystem interrupts that have the highest priority because they occur 
very infrequently, and when they do, all else becomes unimportant.</para>
    </section>
  </content>
</document>